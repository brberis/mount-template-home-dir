#!/bin/bash
#
# MPI SSH Setup Script for PBS/Torque Cluster with NIS
# 
# This script configures SSH connectivity between compute nodes for MPI jobs.
# Works with NIS (Network Information Service) - configures SSH for ALL users
# (current and future) without needing to run the script again for new users.
#
# Can be run by crew user (non-root) - uses sudo for privileged operations.
# 
# Usage: bash setup_ssh_for_mpi.sh
#
# Deployment order:
#   1. Run on head node first (detects /NODUS/.is_headnode)
#   2. Run on each compute node after head node is ready
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if sudo is available
if ! command -v sudo &> /dev/null; then
   log_error "sudo command not found. This script requires sudo to be installed."
   exit 1
fi

# Detect node type
IS_HEADNODE=false
if [[ -f /NODUS/.is_headnode ]]; then
    IS_HEADNODE=true
    log_info "Detected HEAD NODE"
else
    log_info "Detected COMPUTE NODE"
fi

# NOTE: This script works WITHOUT needing PBS or knowing other nodes
# It configures SSH to work with ANY cluster node dynamically
# This is critical for deployments where:
#   1. PBS may not be ready when this script runs
#   2. Nodes are added/removed dynamically
#   3. Not all nodes are always running

log_info "Configuring SSH for dynamic cluster (no node list needed)"
log_info "SSH will accept connections from any cluster node automatically"
echo ""

# Step 1: Configure system-wide SSH client settings for MPI
log_info "Step 1: Configuring system-wide SSH client settings"
SSH_CONFIG_DIR="/etc/ssh/ssh_config.d"
MPI_SSH_CONFIG="${SSH_CONFIG_DIR}/90-mpi-cluster.conf"

# Create ssh_config.d directory if it doesn't exist
sudo mkdir -p "$SSH_CONFIG_DIR"

# Create SSH client configuration for cluster nodes
# Uses pattern matching to accept any cluster node dynamically
sudo tee "$MPI_SSH_CONFIG" > /dev/null << 'EOF'
# SSH configuration for MPI cluster nodes
# Auto-generated by setup_ssh_for_mpi_nis.sh
# This allows passwordless SSH between cluster nodes for all users (including NIS users)
# Works dynamically - no need to know node names in advance

# Match common cluster node patterns and private networks
Host ac-* svante-* *.local 10.* 172.16.* 192.168.*
    # Disable strict host key checking for cluster nodes
    # This allows dynamic node discovery without pre-configuration
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel ERROR
    
    # Disable password authentication (use keys only)
    PasswordAuthentication no
    PubkeyAuthentication yes
    
    # Keep connections alive
    ServerAliveInterval 60
    ServerAliveCountMax 3
    
    # Use default identity files
    IdentityFile ~/.ssh/id_rsa
    IdentityFile ~/.ssh/id_ed25519
EOF

sudo chmod 644 "$MPI_SSH_CONFIG"
log_info "Created system-wide SSH config: ${MPI_SSH_CONFIG}"
log_info "✓ SSH configured for dynamic cluster (accepts any node matching pattern)"

# Step 2: Configure SSH daemon to accept all cluster nodes
log_info "Step 2: Configuring SSH daemon for cluster"
SSHD_CONFIG_DIR="/etc/ssh/sshd_config.d"
MPI_SSHD_CONFIG="${SSHD_CONFIG_DIR}/90-mpi-cluster.conf"

sudo mkdir -p "$SSHD_CONFIG_DIR"

sudo tee "$MPI_SSHD_CONFIG" > /dev/null << 'EOF'
# SSH daemon configuration for MPI cluster
# Auto-generated by setup_ssh_for_mpi.sh

# Enable public key authentication
PubkeyAuthentication yes

# Allow SSH keys for all users
AuthorizedKeysFile .ssh/authorized_keys

# Performance tuning for MPI (handle many simultaneous connections)
MaxStartups 100:10:200
MaxSessions 100
EOF

sudo chmod 644 "$MPI_SSHD_CONFIG"
log_info "Created SSH daemon config: ${MPI_SSHD_CONFIG}"

# Restart SSH daemon to apply changes
log_info "Restarting SSH daemon..."
if sudo systemctl restart sshd 2>/dev/null || sudo systemctl restart ssh 2>/dev/null; then
    log_info "SSH daemon restarted successfully"
else
    log_warn "Could not restart SSH daemon automatically - please restart manually"
fi

# Step 3: Create SSH key generation script for users
log_info "Step 3: Creating SSH key auto-generation script"
SSH_KEY_SCRIPT="/usr/local/bin/generate-mpi-ssh-keys"

sudo tee "$SSH_KEY_SCRIPT" > /dev/null << 'EOFSCRIPT'
#!/bin/bash
# Auto-generate SSH keys for MPI users (including NIS users)
# This script is called on first login or can be run manually

USER_HOME="${1:-$HOME}"
USER_NAME="${2:-$USER}"

if [[ -z "$USER_HOME" || ! -d "$USER_HOME" ]]; then
    exit 0
fi

SSH_DIR="${USER_HOME}/.ssh"
PRIVATE_KEY="${SSH_DIR}/id_rsa"
PUBLIC_KEY="${SSH_DIR}/id_rsa.pub"
AUTHORIZED_KEYS="${SSH_DIR}/authorized_keys"
CONFIG_FILE="${SSH_DIR}/config"

# Only run for non-root users with UID >= 1000
USER_UID=$(id -u "$USER_NAME" 2>/dev/null || echo 0)
if [[ $USER_UID -lt 1000 ]]; then
    exit 0
fi

# Create .ssh directory if it doesn't exist
if [[ ! -d "$SSH_DIR" ]]; then
    mkdir -p "$SSH_DIR"
    chmod 700 "$SSH_DIR"
fi

# Generate SSH key if it doesn't exist
if [[ ! -f "$PRIVATE_KEY" ]]; then
    ssh-keygen -t rsa -b 4096 -f "$PRIVATE_KEY" -N "" -C "${USER_NAME}@mpi-cluster" >/dev/null 2>&1
    chmod 600 "$PRIVATE_KEY"
    chmod 644 "$PUBLIC_KEY"
fi

# Add own public key to authorized_keys if not already there
if [[ -f "$PUBLIC_KEY" ]]; then
    touch "$AUTHORIZED_KEYS"
    if ! grep -qF "$(cat "$PUBLIC_KEY")" "$AUTHORIZED_KEYS" 2>/dev/null; then
        cat "$PUBLIC_KEY" >> "$AUTHORIZED_KEYS"
    fi
    chmod 600 "$AUTHORIZED_KEYS"
fi

# Create SSH config if it doesn't exist
if [[ ! -f "$CONFIG_FILE" ]]; then
    cat > "$CONFIG_FILE" << 'EOF'
# Auto-generated SSH config for MPI cluster
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel ERROR
EOF
    chmod 600 "$CONFIG_FILE"
fi

exit 0
EOFSCRIPT

sudo chmod 755 "$SSH_KEY_SCRIPT"
log_info "Created SSH key generation script: ${SSH_KEY_SCRIPT}"

# Step 3.5: Add auto-execution on login for ALL users (existing and future)
log_info "Step 3.5: Configuring automatic SSH key generation on login"
PROFILE_SCRIPT="/etc/profile.d/99-mpi-ssh-keys.sh"

sudo tee "$PROFILE_SCRIPT" > /dev/null << 'EOFPROFILE'
#!/bin/bash
# Auto-generate MPI SSH keys on first login for any user
# This runs for ALL users (NIS and local) on every login

# Only run for interactive shells with a home directory
if [[ -n "$HOME" && -d "$HOME" && $- == *i* ]]; then
    # Only run for regular users (UID >= 1000)
    if [[ $(id -u) -ge 1000 ]]; then
        # Check if SSH keys already exist
        if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
            # Run the key generation script silently
            /usr/local/bin/generate-mpi-ssh-keys "$HOME" "$USER" >/dev/null 2>&1
        fi
    fi
fi
EOFPROFILE

sudo chmod 755 "$PROFILE_SCRIPT"
log_info "Created login profile script: ${PROFILE_SCRIPT}"
log_info "SSH keys will be auto-generated on first login for ALL users"

# Step 4: Configure system known_hosts (optional - using StrictHostKeyChecking=no makes this unnecessary)
log_info "Step 4: Configuring system known_hosts for localhost"
SYSTEM_KNOWN_HOSTS="/etc/ssh/ssh_known_hosts"

sudo touch "$SYSTEM_KNOWN_HOSTS"

# Add localhost entries (useful for local testing)
log_info "  Scanning SSH keys for localhost"
sudo ssh-keyscan -H localhost 2>/dev/null | sudo tee -a "$SYSTEM_KNOWN_HOSTS" > /dev/null 2>&1
sudo ssh-keyscan -H 127.0.0.1 2>/dev/null | sudo tee -a "$SYSTEM_KNOWN_HOSTS" > /dev/null 2>&1

# Add current hostname
CURRENT_HOST=$(hostname)
log_info "  Scanning SSH keys for current host: ${CURRENT_HOST}"
sudo ssh-keyscan -H "$CURRENT_HOST" 2>/dev/null | sudo tee -a "$SYSTEM_KNOWN_HOSTS" > /dev/null 2>&1

sudo chmod 644 "$SYSTEM_KNOWN_HOSTS"
log_info "System known_hosts configured with localhost and current host"
log_info "NOTE: Other cluster nodes are accepted via StrictHostKeyChecking=no (dynamic discovery)"

# Summary
echo ""
log_info "=========================================="
log_info "  SSH MPI Setup Complete!"
log_info "=========================================="
log_info "Node type: $(if [[ "$IS_HEADNODE" == "true" ]]; then echo "HEAD NODE"; else echo "COMPUTE NODE"; fi)"
log_info "Mode: Dynamic cluster (no node list needed)"
echo ""
log_info "Configuration files created:"
log_info "  - System SSH config: ${MPI_SSH_CONFIG}"
log_info "  - System SSHD config: ${MPI_SSHD_CONFIG}"
log_info "  - SSH key generator: ${SSH_KEY_SCRIPT}"
log_info "  - Login profile hook: ${PROFILE_SCRIPT}"
log_info "  - System known_hosts: ${SYSTEM_KNOWN_HOSTS}"
echo ""
log_info "SSH Key Auto-Generation:"
log_info "  ✓ ALL users (existing and future) will get SSH keys on first login"
log_info "  ✓ No manual intervention required for new NIS users"
log_info "  ✓ Keys are generated automatically and transparently"
echo ""
log_info "Dynamic Node Discovery:"
log_info "  ✓ SSH accepts any cluster node automatically (pattern-based)"
log_info "  ✓ No need to know node names in advance"
log_info "  ✓ Works with nodes that come and go (dynamic scaling)"
log_info "  ✓ Safe for deployment during sequential node provisioning"
echo ""
log_info "Users can login now and SSH keys will be created automatically"
log_info "To manually test SSH after a user logs in:"
log_info "  sudo -u <username> ssh <node> hostname"
echo ""

exit 0
